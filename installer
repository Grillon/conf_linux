#!/usr/bin/env bash
source libsh/libError.sh
debug 0
base=$(pwd)
#TODO: ajouter emacs/doom
#TODO: fixer les versions

function refresh_guix_session_profile {
	guix package --search-paths -p "$HOME/.guix-profile"
}

function vimplug {
	case $1 in
		install)
			curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
				https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
			;;
		uninstall)
			rm -rf ~/.local/share/nvim
			;;
	esac
}

function nvim_tmux {
	case $1 in
		install)
			guix install neovim tmux
			#pip2 install neovim
			#pip3 install neovim
			#gem install neovim
			;;
		uninstall)
			guix remove neovim tmux
			;;
	esac
}

function tpm {
	case $1 in
		install)
			git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
			;;
		uninstall)
			rm -rf ~/.tmux
			;;
	esac
}

function i3wm {
	case $1 in
		install)
			guix install i3-wm quickswitch-i3 i3-gaps i3blocks i3status i3lock python-py3status
			;;
		uninstall)
			guix remove i3-wm quickswitch-i3 i3-gaps i3blocks i3status i3lock python-py3status
			;;
	esac
}

function required_stuff_nvim {
	local action=$1
	type guix
	erreur $? "presence guix" $ESTOP iguix
	case $action in
		install)
			guix install gcc-toolchain python python-wrapper ruby xclip
			;;
		uninstall)
			guix remove gcc-toolchain python python-wrapper ruby xclip
			;;
	esac
}

function config_terminal {
	cd $base
	infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
	tic $TERM.ti
}

function config_ln {
	case $1 in
		install)
			cd $HOME/.config
			if [ ! -d nvim_old ];then
				mv nvim nvim_old
			else
				erreur $KO "existance ancien backup" $ESTOP
			fi
			ln -s $base/.config/nvim
			cd $HOME 
			if [[ ! -f .tmux.conf_old ]]
			then
				mv .tmux.conf .tmux.conf_old
				ln -s $base/.tmux.conf
			else
				erreur $KO "existance ancien backup" $ESTOP
			fi
			cd $base
			;;
		uninstall)
			echo '#pensez a faire :
			rm ~/.config/nvim
			rm ~/.tmux.conf
			'
			;;
	esac
}

function bash_profile {
	case $1 in
		install)
			(cd ~ && ln -s ~/Outils/conf_linux/.bash_profile)
			;;
		uninstall)
			rm ~/.bash_profile
			;;
	esac
}

function iguix {
	# telechargement de l'installateur guix + lien vers la doc
	curl https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh -O guix-install.sh
	echo "complete installation with: https://guix.gnu.org/manual/en/html_node/Binary-Installation.html#Binary-Installation"
}

function urxvt {
	case $1 in
		install)
			guix install rxvt-unicode
			curl https://raw.githubusercontent.com/muennich/urxvt-perls/master/keyboard-select -O keyboard-select
			(cd ~/.urxvt/ext && ln -s ~/Outils/conf_linux/keyboard-select)
			;;
		uninstall)
			guix remove rxvt-unicode
			rm ~/.urxvt/ext/keyboard-select
			;;
	esac
}

function proceed {
	local action=$1
	for stuff in required_stuff_nvim i3wm nvim_tmux urxvt bash_profile config_ln vimplug config_terminal tpm
	do
		$stuff $action 
		refresh_guix_session_profile
	done
}
if [ $# -ne 1 ];then
	erreur $KO "install/uninstall" $ESTOP "echo $0 install\|uninstall"
fi
proceed $1
